name: push-to-dockerhub(CI)

# Repository에 push 했을 때
on:
  push:
    branches:
      - master

# 해당 action yml 파일을 runs-on에 해당하는 VM이 읽을 수 있도록 권한 설정.
permissions:
  contents: read

# 수행할 작업들을 나열한다.
jobs:
  build-and-push-to-dockerhub: # Job Name
    runs-on: ubuntu-latest # Job을 수행할 환경

    steps:
      # GitHub에 올라온 Action code를 use
      # https://github.com/actions/ 에 명시된 action 사용가능
      - name : checkout-actions
        uses: actions/checkout@v4 # actions repository를 checkout

      # JDK 설정.
      - name: JDK set
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'

      # Build 시 적용할 Properties 정보 secret으로 넘겨줘서 생성.
      - name: bring application.yml
        run: |
          cd ./src/main/resources
          touch ./application.yml
          echo "${{ secrets.PROPERTIES_PROD }}" > ./application.yml
        shell: bash

      # 권한 부여 + 테스트 제외 빌드
      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test -Pprofile=prod

      - name: Docker build & push to docker repo
        run: |
          docker login -u ${{ secrets.DOCKER_ID }} -p ${{ secrets.DOCKER_PWD }}
          docker build -t ${{ secrets.DOCKER_REPO }}/guest-book-spring-boot .
          docker push ${{ secrets.DOCKER_REPO }}/guest-book-spring-boot